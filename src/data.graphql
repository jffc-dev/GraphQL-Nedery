scalar Date

enum ProviderPaymentStatus {
  SUCCEEDED  
  PROCESSING  
  CANCELED  
  FAILED  
}

type Query {
  # Products Queries
  listAndSearchProducts(page: Int!, pageSize: Int!, categoryId: ID): PaginatedProducts

  # Client Specific Queries
  myOrders: [Order]

  # Manager Specific Queries
  showClientOrders(clientId: ID!): [Order]
}

type Mutation {
  # Authentication Mutations
  signUp(input: SignUpInput!): AuthPayload
  signIn(input: LoginInput!): AuthPayload
  signOut: Boolean
  forgotPassword(input: ForgotPasswordInput!): Boolean
  resetPassword(input: ResetPasswordInput!): Boolean

  # Product Management (Manager Only)
  createProduct(input: CreateProductInput!): Product
  updateProduct(input: UpdateProductInput!): Product
  deleteProduct(id: ID!): Boolean

  # Role Management
  createRole(input: CreateRoleInput!): Role
  updateRole(input: UpdateRoleInput!): Role
  deleteRole(roleId: ID!): Boolean

  # Category Management
  createCategory(input: CreateCategoryInput!): Category
  updateCategory(input: UpdateCategoryInput!): Category
  deleteCategory(id: ID!): Boolean

  # Client Actions
  buyProducts(input: BuyInput!): Order
  addProductToCart(input: AddProductToCartInput!): CartItem
  likeProduct(productId: ID!): Boolean
}

# Common Types
type Product {
  id: ID!
  name: String!
  description: String
  stock: Float
  isActive: Boolean!
  price: Float!
  createdAt: Date!
  updatedAt: Date!
  images: [String]
  createdBy: ID!

  creator: User!
  categories: [Category]
}

type PaginatedProducts {
  products: [Product]
  total: Int!
  page: Int!
  pageSize: Int!
}

type Order {
  id: ID!
  clientId: ID!
  totalAmount: Float!
  status: String!
  createdAt: Date!

  products: [OrderDetail!]
  client: User!
  payments: [PaymentAttempt!]!
}

type PaymentAttempt {
  id: ID!
  orderId: ID!
  providerCustomerId: ID!
  providerPaymentId: ID!
  providerClientSecret: ID!
  providerStatus: ProviderPaymentStatus!
  providerAmount: Float!
  providerPaymentMethod: String!
  createdAt: Date
  updatedAt: Date

  order: Order!
}

type OrderDetail {
  product: Product!
  quantity: Int!
}

type CartItem {
  userId: ID!
  productId: ID!
  quantity: Int!
  createdAt: Date!
  updatedAt: Date

  product: Product!
  user: User!
}

type AuthPayload {
  token: String!
  user: User!
}

# User Types
type User {
  id: ID!
  email: String!
  phoneNumber: String
  address: String
  verificatedAt: String
  createdAt: Date!
  updatedAt: Date!
  lastLoginAt: String
  verificationToken: String
  verificationExpiresAt: String
  resetPasswordToken: String
  resetPasswordExpiresAt: String

  likedProducts: [UserProductLike]!
  cartProducts:[CartItem]!
  roles: [Role!]!
  createdProducts: [User]
  orders: [Order!]!
}

type UserProductLike{
  productId: ID!
  userId: ID!
  createdAt: Date!

  user: User!
  product: Product!
}

type Role {
  id: ID!
  name: String!
  description: String
}

type Category {
  id: ID!
  name: String!
  description: String
  createdAt: Date!
  updatedAt: Date!

  products: [Product!]!
}

# Input Types
input SignUpInput {
  email: String!
  password: String!
  phoneNumber: String
  address: String
}

input LoginInput {
  email: String!
  password: String!
}

input ResetPasswordInput {
  token: String!
  newPassword: String!
}

input ForgotPasswordInput {
  email: String!
}

input CreateProductInput {
  name: String!
  description: String
  price: Float!
  stock: Float
  categoryIds: [ID!]
}

input UpdateProductInput {
  id: ID!
  name: String
  description: String
  price: Float
  stock: Float
  categoryIds: [ID!]
}

input BuyInput {
  products: [BuyProductInput!]!
}

input BuyProductInput {
  productId: ID!
  quantity: Int!
}

input CreateRoleInput {
  name: String!
  description: String
}

input UpdateRoleInput {
  id: ID!
  name: String
  description: String
}

input CreateCategoryInput {
  name: String!
  description: String
}

input UpdateCategoryInput {
  id: ID!
  name: String
  description: String
}

input AddProductToCartInput {
  productId: ID!
  quantity: Int!
}

# Subscriptions for Real-Time Features
type Subscription {
  stockLowNotification(productId: ID!): StockLowPayload
  passwordChangeNotification(userId: ID!): PasswordChangePayload
}

type StockLowPayload {
  product: Product!
  user: User!
}

type PasswordChangePayload {
  user: User!
}
